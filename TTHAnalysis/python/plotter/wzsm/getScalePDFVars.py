import ROOT

""" The input file is generated by mcPlots. An specific example on how to do it for WZ (fiducial, remember to add weights if you go to SR!!!!!)

mcPlots.py wzsm/includes/mca_WZscale.txt wzsm/cuts_wzsm.txt wzsm/plots_wzsm.txt -P /pool/ciencias/userstorage/carlosec/WZ_AC_LHE/ --Fs /pool/ciencias/userstorage/carlosec/WZ_AC_LHE/leptonJetReCleanerWZSM/ --Fs /pool/ciencias/userstorage/carlosec/WZ_AC_LHE/leptonBuilderWZSM/ --Fs /pool/cienciasrw/userstorage/carlosec/WZ_AC_LHE/lepgenVarsWZSM_v2/ --pdir /nfs/fanae/user/carlosec/www/wz/wz/lepmvaVT/srwzSCALEALPHA/ -j 64 -l 35.867 --s2v --tree treeProducerSusyMultilepton --mcc wzsm/mcc_varsub_wzsm.txt --mcc wzsm/mcc_triggerdefs.txt -W 1 -p WZ_id.* --print txt --load-macro wzsm/functionsPUW.cc --load-macro wzsm/functionsSF.cc --load-macro wzsm/functionsWZ.cc --perBin --sP flavor

Only samples in WZ_AC_LHE have LHE weights, thus to apply the scale/pdf variations that's the folder to be used (yes, I know you hate me for having it on my userstorage instead of the common one). Check the mca at wzsm/includes/mca_WZscale.tx to see the typical example of an mca (one file per point)

"""
#Input file (as output from mcPlots.py)
inFile = ROOT.TFile("/nfs/fanae/user/carlosec/www/wz/wz/lepmvaVT/srwzSCALEALPHA//plots_wzsm.root", "OPEN")
#Name of the histograms in the file. Usually: VarName_WZ_id_{bin} bin is the LHEweight id. In the WZ_AC_LHE files they are ordered, so it is the lhe weight vector entry i-1 for id i
baseName1 = "flavor_WZ_id_{bin}"

class histoPoint(object):
  def __init__(self, histo1, id, nominal = 0):
    self.h  = histo1
    self.id = id
    histoList.append(self)
    if nominal == 0:
      self.N = self
    else:
      self.N = nominal      
    self.setVars()

  def setVars(self):
    self.hvar = self.h.Clone()
    for i in range(1, self.h.GetNbinsX()+1):
      self.hvar.SetBinContent(i, self.h.GetBinContent(i) - self.N.h.GetBinContent(i))
  def getVal(self, i):
    if i == 0: return self.h.Integral() 
    return self.h.GetBinContent(i)  
  def getVar(self,i):
    if i == 0: return self.h.Integral() - self.N.h.Integral()
    return self.hvar.GetBinContent(i)




#Rootfile with the histos 



#Load the histos


histoList = []

print "Loading histograms............."
for i in range(1,223):
  if len(histoList) == 0:
    histoPoint(inFile.Get(baseName1.replace("{bin}", str(i))), i)
  else:
    histoPoint(inFile.Get(baseName1.replace("{bin}", str(i))), i, histoList[0])
  #print histoList[-1].id, histoList[-1].getVal(1),histoList[-1].getVal(2), histoList[-1].getVal(3), histoList[-1].getVal(4)


print "Getting ME Unc...."

indexesME = [2,3,4,5,7,9]
meVARUp   = [0.,0.,0.,0., 0.]
meVARDn   = [0.,0.,0.,0., 0.]

for H in histoList:
  if H.id in indexesME:
    #For each flavor bin
    for i in range(5):
      if H.getVar(i) > meVARUp[i]:
        meVARUp[i] = H.getVar(i)
      if H.getVar(i) < meVARDn[i]:
        meVARDn[i] = H.getVar(i)

print "Scale UNC Up: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(meVARUp[0],meVARUp[1],meVARUp[2],meVARUp[3],meVARUp[4])
print "Scale UNC Up, Rel: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(meVARUp[0]/histoList[0].getVal(0),meVARUp[1]/histoList[0].getVal(1),meVARUp[2]/histoList[0].getVal(2),meVARUp[3]/histoList[0].getVal(3),meVARUp[4]/histoList[0].getVal(4))

print "Scale UNC Down: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(meVARDn[0],meVARDn[1],meVARDn[2],meVARDn[3],meVARDn[4])
print "Scale UNC Down, Rel: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(meVARDn[0]/histoList[0].getVal(0),meVARDn[1]/histoList[0].getVal(1),meVARDn[2]/histoList[0].getVal(2),meVARDn[3]/histoList[0].getVal(3),meVARDn[4]/histoList[0].getVal(4))

indexesPDFRMS = range(10,110)
indexesAlphaS = [110,111]
pdfVAR   = [0.,0.,0.,0., 0.]

count = 0.
for H in histoList:
  if H.id in indexesPDFRMS:
    #For each flavor bin
    for i in range(5):
      pdfVAR[i] += H.getVar(i)**2
    count +=1

for i in range(5):
  #print count, pdfVAR[i]
  pdfVAR[i] = (pdfVAR[i]/count)
  pdfVAR[i] += (0.375*(H.getVar(110)-H.getVar(111)))**2
  pdfVAR[i] = pdfVAR[i]**0.5 

print "PDF UNC: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(pdfVAR[0],pdfVAR[1],pdfVAR[2],pdfVAR[3],pdfVAR[4])
print "PDF UNC, Rel: Total %1.5f, eee %1.5f, eem %1.5f, mme %1.5f, mmm %1.5f"%(pdfVAR[0]/histoList[0].getVal(0),pdfVAR[1]/histoList[0].getVal(1),pdfVAR[2]/histoList[0].getVal(2),pdfVAR[3]/histoList[0].getVal(3),pdfVAR[4]/histoList[0].getVal(4))

#CT10 => Finish it
for i in range(112, 167):
  histoList[i].N = histoList[112]
  histoList[i].setVars()

#Now compute the horrible DX+ and DX- things

